{"version":3,"sources":["SowData/sowDataTable.module.css","SowData/SowDataModal.js/Modal.module.css","head/head.module.css","SowFileInfo/sow.module.css","head/HeadMark.js","providers/SowProvider.js","SowFileInfo/SowFileInfo.js","SowData/SowDataModal.js/Modal.js","SowData/SowDataTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeadMark","className","styles","headContainer","src","alt","href","SowInfoContext","createContext","SowProvider","props","useState","BatchNumber","TimeStarted","TimeEnded","Parity","data","SowInfo","setSowInfo","Provider","value","children","SowFileInfo","useContext","loadStateFromFile","fileName","fileContents","splitFileName","slice","split","batchNum","parity","timeStarted","timeEnded","readFileContents","forEach","element","splitElement","push","p","r","t","a","sowHeadContainer","type","defaultValue","onChange","Bnum","target","e","file","reader","FileReader","onload","name","result","onerror","console","log","error","readAsText","fileHandler","files","Modal","sowInfo","perfID","useRef","recID","timePerf","index","returnDefaultObject","action","show","modal","firstDiv","ref","map","lastDiv","onClick","newList","current","modalClose","AddSowInfo","splice","DeleteSowInfo","SowDataTable","ShowModal","state","setState","toggleModal","changeIndex","getdataString","string","table","val","entries","buttonContainer","document","createElement","Blob","URL","createObjectURL","download","body","appendChild","click","downloadCSV","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73508f09.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"sowDataTable_table__1CH4m\",\"entries\":\"sowDataTable_entries__2iWR-\",\"buttonContainer\":\"sowDataTable_buttonContainer__oeAEj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__3DhYP\",\"firstDiv\":\"Modal_firstDiv__2UuW2\",\"lastDiv\":\"Modal_lastDiv__2JHp8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headContainer\":\"head_headContainer__1iAAN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sowHeadContainer\":\"sow_sowHeadContainer__K4nsU\"};","import React from 'react';\r\nimport styles from './head.module.css'\r\n\r\nconst HeadMark = () => {\r\n    return (\r\n    <div className={styles.headContainer}>\r\n        <img src=\"pig.svg\" alt=\"piggy\"/>\r\n        <nav>\r\n            <ul>\r\n                <li>\r\n                    <a href=\"#file-info\">Insert file information</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#Insert-info\">Insert information</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#export-info\">export information</a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeadMark;\r\n","import React, {Provider, createContext, useState} from 'react'\r\n\r\nexport const SowInfoContext = createContext();\r\n\r\n\r\nexport const SowProvider = props => {\r\n    const [SowInfo, setSowInfo] = useState({\r\n        BatchNumber: \"\",\r\n        TimeStarted: \"\",\r\n        TimeEnded: \"\",\r\n        Parity: \"\",\r\n        data: []\r\n    });\r\n    return (\r\n        <SowInfoContext.Provider value={[SowInfo,setSowInfo]}>\r\n            {props.children}\r\n        </SowInfoContext.Provider>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport styles from \"./sow.module.css\";\r\nimport { SowInfoContext } from '../providers/SowProvider';\r\n\r\nconst SowFileInfo = () => {\r\n\r\n\r\n    const [SowInfo, setSowInfo] = useContext(SowInfoContext);\r\n\r\n\r\n    const setBatchNumber = Bnum => {\r\n        setSowInfo({ ...SowInfo, BatchNumber: Bnum.target.value, });\r\n    }\r\n\r\n    const setTimeStarted = Bnum => {\r\n        setSowInfo({ ...SowInfo, TimeStarted: Bnum.target.value, });\r\n    }\r\n\r\n    const setTimeEnded = Bnum => {\r\n        setSowInfo({ ...SowInfo, TimeEnded: Bnum.target.value, });\r\n    }\r\n\r\n    const setParity = Bnum => {\r\n        setSowInfo({ ...SowInfo, Parity: Bnum.target.value, });\r\n    }\r\n\r\n    const fileHandler = file => {\r\n        let reader = new FileReader();\r\n\r\n        reader.onload = () => {\r\n            loadStateFromFile(file.name, reader.result);\r\n\r\n        };\r\n\r\n        reader.onerror = function () {\r\n            console.log(reader.error);\r\n        };\r\n\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    const loadStateFromFile = (fileName, fileContents) => {\r\n        let splitFileName = fileName.slice(0, -4).split(\" \");\r\n        let batchNum = splitFileName[0].split(\"-\")[1];\r\n        let parity = splitFileName[1].split(\"-\")[1];\r\n        let timeStarted = splitFileName[2].split(\"-\")[1];\r\n        let timeEnded = splitFileName[3].split(\"-\")[1];\r\n\r\n        setSowInfo({\r\n            BatchNumber: batchNum,\r\n            TimeStarted: timeStarted,\r\n            TimeEnded: timeEnded,\r\n            Parity: parity,\r\n            data: readFileContents(fileContents)\r\n        })\r\n    }\r\n\r\n    const readFileContents = (fileContents) => {\r\n        let data = [];\r\n        fileContents.split(\"\\n\").slice(1, -1).forEach(element => {\r\n            let splitElement = element.split(\",\");\r\n            data.push({ p: splitElement[0], r: splitElement[1], t: splitElement[3], a: splitElement[2] });\r\n        });\r\n        return data;\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Please Enter Sow file info</h2>\r\n            <div className={styles.sowHeadContainer}>\r\n                <div>\r\n                    <div>\r\n                        Batch number\r\n                </div>\r\n                    <input type=\"text\" defaultValue={SowInfo.BatchNumber} onChange={setBatchNumber}></input>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        Parity\r\n                </div>\r\n                    <input type=\"text\" defaultValue={SowInfo.Parity} onChange={setParity}></input>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        Time Started\r\n                    </div>\r\n                    <input type=\"text\" defaultValue={SowInfo.TimeStarted} onChange={setTimeStarted}></input>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        Time Ended\r\n                </div>\r\n                    <input type=\"text\" defaultValue={SowInfo.TimeEnded} onChange={setTimeEnded}></input>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        insert Previous File\r\n                </div>\r\n                    <input type=\"file\" onChange={e => fileHandler(e.target.files[0])}></input>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SowFileInfo;\r\n","import React, {useContext,useRef} from 'react'\r\nimport styles from \"./Modal.module.css\";\r\nimport { SowInfoContext } from '../../providers/SowProvider';\r\n\r\nfunction Modal(props) {\r\n    \r\n    const [sowInfo,setSowInfo] = useContext(SowInfoContext);\r\n    const actionOptions = [\"levering\", \"parallel pressing\", \"head to head knock\", \"Anal Genital nosing\", \"nose to body\"];\r\n\r\n\r\n    let perfID = useRef(\"\");\r\n    let recID = useRef(\"\");\r\n    let timePerf = useRef(\"\");\r\n\r\n    \r\n    if(props.index > -1){\r\n\r\n    }\r\n    const returnDefaultObject = () =>{\r\n        if(props.index >-1){\r\n            return sowInfo.data[props.index]\r\n        }\r\n        return {p: \"\",r: \"\", t:\"\", a: \"levering\"}\r\n        \r\n    }\r\n\r\n    let action =returnDefaultObject().a; \r\n\r\n    const AddSowInfo = (type) => {\r\n        let newList= sowInfo.data;\r\n\r\n        if(props.index > -1){\r\n            newList[props.index]= {\r\n                p: perfID.current.value,\r\n                r:recID.current.value,\r\n                t:timePerf.current.value,\r\n                a:action\r\n            }\r\n        }\r\n        else{\r\n            newList.push({\r\n                p: perfID.current.value,\r\n                r:recID.current.value,\r\n                t:timePerf.current.value,\r\n                a:action\r\n            })\r\n        }\r\n        setSowInfo({...sowInfo,data:newList})\r\n        props.modalClose({type: \"next\"});\r\n    }\r\n\r\n    const DeleteSowInfo = () => {\r\n        if (props.index !== -1) {\r\n            let newList= sowInfo.data;\r\n            newList.splice(props.index,1);\r\n            setSowInfo({...sowInfo,data:newList});\r\n        }\r\n        props.modalClose({type: \"next\"});\r\n    }\r\n\r\n    const handleSelect = (value)=>{\r\n        action = value.target.value;\r\n    }\r\n\r\n    if (!props.show) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className={styles.modal}>\r\n            <div className={styles.firstDiv}>\r\n                <label>enter time that the action was performed\r\n                </label>\r\n                <input type=\"text\" defaultValue={returnDefaultObject().t} ref={timePerf}></input>\r\n            </div>\r\n            <div>\r\n                <label>enter performer ID\r\n                </label>\r\n                <input type=\"text\" defaultValue={returnDefaultObject().p} ref={perfID}></input>\r\n            </div>\r\n            <div>\r\n                <label>enter reciever ID\r\n                </label>\r\n                <input type=\"text\" defaultValue={returnDefaultObject().r} ref={recID}></input>\r\n            </div>   \r\n            <div>\r\n                <label>select Action Performed\r\n                </label>\r\n                <select defaultValue={returnDefaultObject().a} onChange={handleSelect}>\r\n                    {actionOptions.map((value)=>(\r\n                        <option value={value} >{value}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n            <div className={styles.lastDiv}>\r\n                <button onClick={e => AddSowInfo(e)}>add that boi</button>\r\n                <button onClick={e => props.modalClose({type: \"next\"})}>Cancel that boi</button>\r\n                <button onClick={e => DeleteSowInfo({type: \"next\"})}>delete that boi</button>\r\n            </div>   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import React, { useContext, useState } from 'react'\r\nimport { SowInfoContext, SowProvider } from '../providers/SowProvider'\r\nimport styles from \"./sowDataTable.module.css\"\r\nimport Modal from './SowDataModal.js/Modal'\r\n\r\nconst SowDataTable = () => {\r\n\r\n    const [sowInfo, setSowInfo] = useContext(SowInfoContext);\r\n\r\n    const [state, setState] = useState({\r\n        ShowModal: false,\r\n        action: \"add\",\r\n        index: -1,\r\n    })\r\n\r\n    const toggleModal = (action) => {\r\n        if (action.type === \"add\") {\r\n            setState({\r\n                ShowModal: true,\r\n                action: \"add\",\r\n                index: -1\r\n            });\r\n        }\r\n        else if (action.type === \"update\") {\r\n            setState({\r\n                ShowModal: true,\r\n                action: \"update\",\r\n                index: action.changeIndex\r\n            });\r\n        }\r\n        else {\r\n            setState({\r\n                ShowModal: false,\r\n                index: -1\r\n            })\r\n        }\r\n    }\r\n\r\n    const getdataString = () => {\r\n        let string = \"performer ID, Reciever ID, Action Performed,time Performed\\n\"\r\n        sowInfo.data.forEach(value => {\r\n            string += value.p + \",\" + value.r + \",\" + value.a + \",\" + value.t + \"\\n\";\r\n        });\r\n        console.log(string);\r\n        return string;\r\n    }\r\n\r\n    const downloadCSV = () => {\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([getdataString()], { type: 'text/plain' });\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = `BN-${sowInfo.BatchNumber} PA-${sowInfo.Parity} TS-${sowInfo.TimeStarted} TE-${sowInfo.TimeEnded}.csv`;\r\n        document.body.appendChild(element); // Required for this to work in FireFox\r\n        element.click();\r\n    }\r\n\r\n    const headers = [\"performer ID\", \"Reciever ID\", \"Action Performed\", \"time Performed\"];\r\n\r\n    return (\r\n        <div>\r\n            <table className={styles.table}>\r\n                <thead>\r\n                    <tr>\r\n                        {headers.map((value) => (\r\n                            <th>{value}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {sowInfo.data.map((val, index) => (\r\n                        <tr className={styles.entries} onClick={e => toggleModal({ type: \"update\", changeIndex: index })}>\r\n                            <td>{val.p}</td>\r\n                            <td>{val.r}</td>\r\n                            <td>{val.a}</td>\r\n                            <td>{val.t}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            <div className={styles.buttonContainer}>\r\n                <button onClick={e => toggleModal({ type: \"add\" })}>add entry</button>\r\n                <button onClick={e => downloadCSV()}>Export to CSV</button>\r\n            </div>\r\n\r\n            <Modal show={state.ShowModal} modalClose={toggleModal} index={state.index}>\r\n            </Modal>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SowDataTable\r\n","import React from 'react';\nimport './App.css';\nimport HeadMark from './head/HeadMark';\nimport SowFileInfo from './SowFileInfo/SowFileInfo';\nimport { SowProvider } from './providers/SowProvider';\nimport SowDataTable from './SowData/SowDataTable';\n\nconst App = () => {\n    return (\n    <div className=\"App\">\n      <SowProvider>\n        <HeadMark></HeadMark>\n        <SowFileInfo></SowFileInfo>\n        <SowDataTable></SowDataTable>\n      </SowProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}